// <auto-generated />
using System;
using CreacionesPajov.WEB.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CreacionesPajov.WEB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ColorHilo", b =>
                {
                    b.Property<int>("ColorHiloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ColorHiloId");

                    b.ToTable("ColorHilos");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ColorTela", b =>
                {
                    b.Property<int>("ColorTelaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ColorTelaId");

                    b.ToTable("ColorTelas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ControlLote", b =>
                {
                    b.Property<int?>("IdControlLote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Total")
                        .HasColumnType("int");

                    b.HasKey("IdControlLote");

                    b.ToTable("ControlLotes");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.DetalleHilo", b =>
                {
                    b.Property<int>("DetalleHiloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ControlLoteId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("HiloId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("DetalleHiloId");

                    b.HasIndex("ControlLoteId");

                    b.HasIndex("HiloId");

                    b.ToTable("DetalleHilos");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.DetalleLote", b =>
                {
                    b.Property<int>("DetalleControlLoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ControLotesIdControlLote")
                        .HasColumnType("int");

                    b.Property<int?>("IdControlLote")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ProduccionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("DetalleControlLoteId");

                    b.HasIndex("ControLotesIdControlLote");

                    b.HasIndex("ProduccionId");

                    b.ToTable("DetalleLote");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.DetalleTela", b =>
                {
                    b.Property<int>("DetalleTelaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ControlLoteId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TelaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("DetalleTelaId");

                    b.HasIndex("ControlLoteId");

                    b.HasIndex("TelaId");

                    b.ToTable("DetalleTelas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Empleado", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.Property<int?>("TipoDocumentoId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("EmpleadoId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("Empleados");

                    b.HasData(
                        new
                        {
                            EmpleadoId = 1,
                            Apellido = "Guzman",
                            Cargo = "C.E.O",
                            Documento = "986547",
                            Edad = 20,
                            Email = "Sarareina@gmail.com",
                            Estado = true,
                            FechaRegistro = new DateTime(2017, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Sara",
                            Telefono = 4560536,
                            TipoDocumentoId = 1
                        });
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Fase", b =>
                {
                    b.Property<int>("FaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("FaseId");

                    b.ToTable("Fases");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Hilo", b =>
                {
                    b.Property<int>("HiloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("ColorHiloId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Medida")
                        .HasColumnType("double");

                    b.Property<int?>("ProveedorHiloId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("HiloId");

                    b.HasIndex("ColorHiloId");

                    b.HasIndex("ProveedorHiloId");

                    b.ToTable("Hilos");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Operacion", b =>
                {
                    b.Property<int>("OperacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SAM")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TipoOperacionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("OperacionId");

                    b.HasIndex("TipoOperacionId");

                    b.ToTable("Operaciones");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Produccion", b =>
                {
                    b.Property<int>("ProduccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("FaseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("ProduccionId");

                    b.HasIndex("FaseId");

                    b.ToTable("Producciones");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ProduccionGrupal", b =>
                {
                    b.Property<int>("ProduccionGrupalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MetaDia")
                        .HasColumnType("int");

                    b.Property<int?>("ProduccionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ProduccionReal")
                        .HasColumnType("int");

                    b.Property<int?>("TipoJornadaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ProduccionGrupalId");

                    b.HasIndex("ProduccionId");

                    b.HasIndex("TipoJornadaId");

                    b.ToTable("ProduccionesGrupales");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ProveedorHilo", b =>
                {
                    b.Property<int>("ProveedorHiloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NIT")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ProveedorHiloId");

                    b.ToTable("ProveedorHilos");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ProveedorTela", b =>
                {
                    b.Property<int>("ProveedorTelaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NIT")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ProveedorTelaId");

                    b.ToTable("ProveedorTelas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Remision", b =>
                {
                    b.Property<int>("RemisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadPrendas")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Encargado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("FaseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaLlegada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaSalida")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RemisionId");

                    b.HasIndex("FaseId");

                    b.ToTable("Remisiones");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ReporteProduccion", b =>
                {
                    b.Property<int>("ReporteProduccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TipoReporteProduccion")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TiposReportesProduccionTipoReporteProduccionId")
                        .HasColumnType("int");

                    b.HasKey("ReporteProduccionId");

                    b.HasIndex("TiposReportesProduccionTipoReporteProduccionId");

                    b.ToTable("ReportesProduccion");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.SubFase", b =>
                {
                    b.Property<int>("SubFaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("FaseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OperacionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("SubFaseId");

                    b.HasIndex("FaseId");

                    b.HasIndex("OperacionId");

                    b.ToTable("SubFases");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Tela", b =>
                {
                    b.Property<int>("TelaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("ColorTelaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmpresaEmpaque")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmpresaRevision")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProveedorTelaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tejido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TelaId");

                    b.HasIndex("ColorTelaId");

                    b.HasIndex("ProveedorTelaId");

                    b.ToTable("Telas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("TipoDocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("TipoDocumentoId");

                    b.ToTable("TiposDocumento");

                    b.HasData(
                        new
                        {
                            TipoDocumentoId = 1,
                            Nombre = "CC"
                        },
                        new
                        {
                            TipoDocumentoId = 2,
                            Nombre = "CE"
                        });
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoJornada", b =>
                {
                    b.Property<int>("TipoJornadaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("TipoJornadaId");

                    b.ToTable("TiposJornadas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoNovedadEmpleado", b =>
                {
                    b.Property<int>("TipoNovedadEmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EmpleadoId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("TipoNovedadEmpleadoId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("TipoNovedadEmpleados");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoOperacion", b =>
                {
                    b.Property<int>("TipoOperacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("TipoOperacionId");

                    b.ToTable("TiposOperacion");

                    b.HasData(
                        new
                        {
                            TipoOperacionId = 1,
                            Nombre = "BASE"
                        },
                        new
                        {
                            TipoOperacionId = 2,
                            Nombre = "MODA"
                        });
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoPrenda", b =>
                {
                    b.Property<int>("TipoPrendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TipoPrendaId");

                    b.ToTable("TipoPrendas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoReporteProduccion", b =>
                {
                    b.Property<int>("TipoReporteProduccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("TipoReporteProduccionId");

                    b.ToTable("TipoReportesProduccion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Usuario", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Usuario");

                    b.HasData(
                        new
                        {
                            Id = "0h174cfb–4418–1c3e-a2bf-89f716w72cu3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e61fd3a4-a9fa-4681-8113-c1f42f677026",
                            Email = "felipecanorojascr7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FELIPECANOROJASCR7@GMAIL.COM",
                            NormalizedUserName = "FELIPECANOROJASCR7@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAZmGE2/g7P+K09iTH3nj1nKiAru95QOWjlwEljJUQdjDzucdyu/2v7KajUTTZn2Jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7e6a674-18be-43e5-b3f5-15271b5d54a2",
                            TwoFactorEnabled = false,
                            UserName = "felipecanorojascr7@gmail.com",
                            Estado = true
                        });
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.DetalleHilo", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.ControlLote", "ControLote")
                        .WithMany("DetalleHilos")
                        .HasForeignKey("ControlLoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreacionesPajov.WEB.Models.Entities.Hilo", "Hilo")
                        .WithMany("DetalleHilos")
                        .HasForeignKey("HiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControLote");

                    b.Navigation("Hilo");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.DetalleLote", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.ControlLote", "ControLotes")
                        .WithMany("DetalleLote")
                        .HasForeignKey("ControLotesIdControlLote");

                    b.HasOne("CreacionesPajov.WEB.Models.Entities.Produccion", "Producciones")
                        .WithMany("DetalleLotes")
                        .HasForeignKey("ProduccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControLotes");

                    b.Navigation("Producciones");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.DetalleTela", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.ControlLote", "ControLote")
                        .WithMany("DetalleTelas")
                        .HasForeignKey("ControlLoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreacionesPajov.WEB.Models.Entities.Tela", "Tela")
                        .WithMany("DetalleTelas")
                        .HasForeignKey("TelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControLote");

                    b.Navigation("Tela");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Empleado", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.TipoDocumento", "TiposDocumento")
                        .WithMany("Empleados")
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TiposDocumento");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Hilo", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.ColorHilo", "ColoresHilos")
                        .WithMany("Hilos")
                        .HasForeignKey("ColorHiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreacionesPajov.WEB.Models.Entities.ProveedorHilo", "ProveedoresHilo")
                        .WithMany("Hilos")
                        .HasForeignKey("ProveedorHiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColoresHilos");

                    b.Navigation("ProveedoresHilo");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Operacion", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.TipoOperacion", "TiposOperacion")
                        .WithMany("Operaciones")
                        .HasForeignKey("TipoOperacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TiposOperacion");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Produccion", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.Fase", "Fases")
                        .WithMany("producciones")
                        .HasForeignKey("FaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fases");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ProduccionGrupal", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.Produccion", "Producciones")
                        .WithMany()
                        .HasForeignKey("ProduccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreacionesPajov.WEB.Models.Entities.TipoJornada", "TiposJornadas")
                        .WithMany("ProduccionesGrupales")
                        .HasForeignKey("TipoJornadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producciones");

                    b.Navigation("TiposJornadas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Remision", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.Fase", "Fases")
                        .WithMany("Remisiones")
                        .HasForeignKey("FaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fases");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ReporteProduccion", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.TipoReporteProduccion", "TiposReportesProduccion")
                        .WithMany("ReportesProduccion")
                        .HasForeignKey("TiposReportesProduccionTipoReporteProduccionId");

                    b.Navigation("TiposReportesProduccion");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.SubFase", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.Fase", "Fases")
                        .WithMany("SubFases")
                        .HasForeignKey("FaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreacionesPajov.WEB.Models.Entities.Operacion", "Operaciones")
                        .WithMany("SubFases")
                        .HasForeignKey("OperacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fases");

                    b.Navigation("Operaciones");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Tela", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.ColorTela", "ColorTelas")
                        .WithMany()
                        .HasForeignKey("ColorTelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreacionesPajov.WEB.Models.Entities.ProveedorTela", "ProveedorTelas")
                        .WithMany("Telas")
                        .HasForeignKey("ProveedorTelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorTelas");

                    b.Navigation("ProveedorTelas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoNovedadEmpleado", b =>
                {
                    b.HasOne("CreacionesPajov.WEB.Models.Entities.Empleado", "Empleados")
                        .WithMany("TipoNovedadEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ColorHilo", b =>
                {
                    b.Navigation("Hilos");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ControlLote", b =>
                {
                    b.Navigation("DetalleHilos");

                    b.Navigation("DetalleLote");

                    b.Navigation("DetalleTelas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Empleado", b =>
                {
                    b.Navigation("TipoNovedadEmpleados");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Fase", b =>
                {
                    b.Navigation("producciones");

                    b.Navigation("Remisiones");

                    b.Navigation("SubFases");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Hilo", b =>
                {
                    b.Navigation("DetalleHilos");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Operacion", b =>
                {
                    b.Navigation("SubFases");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Produccion", b =>
                {
                    b.Navigation("DetalleLotes");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ProveedorHilo", b =>
                {
                    b.Navigation("Hilos");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.ProveedorTela", b =>
                {
                    b.Navigation("Telas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.Tela", b =>
                {
                    b.Navigation("DetalleTelas");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoDocumento", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoJornada", b =>
                {
                    b.Navigation("ProduccionesGrupales");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoOperacion", b =>
                {
                    b.Navigation("Operaciones");
                });

            modelBuilder.Entity("CreacionesPajov.WEB.Models.Entities.TipoReporteProduccion", b =>
                {
                    b.Navigation("ReportesProduccion");
                });
#pragma warning restore 612, 618
        }
    }
}
